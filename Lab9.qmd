---
title: "Lab 9"
format: html
editor: visual
---

## Part 1: Vectorization

```{r}
library(tidyverse)
library(dplyr)
library(data.table)
library(parallel)


fun1 <- function(n = 100, k = 4, lambda = 4) {
  x <- NULL
  
  for (i in 1:n){
    x <- rbind(x, rpois(k, lambda))    
  }
  
  return(x)
}

fun1alt <- function(n = 100, k = 4, lambda = 4) {
  x <- NULL
  
  for (i in 1:250){
    x <- rbind(x, rpois(k, lambda))    
  }
  
  return(x)
}
```

```{r}

set.seed(123) 
data_fun1 <- fun1()
data_fun1alt <- fun1alt()


dim(data_fun1)
dim(data_fun1alt)


ks_test_result <- ks.test(as.vector(data_fun1), as.vector(data_fun1alt)) #Hope this was the right test to use
ks_test_result
```

Non parametric testing of sample distributions \^ yields a p of 0.8528 --\> fun1alt âˆ´ is not statistically significantly different from fun1

```{r}
# Benchmarking
microbenchmark::microbenchmark(
  fun1(),
  fun1alt()
)
```

```{r}
# Data Generating Process (10 x 10,000 matrix)
set.seed(1234)
x <- matrix(rnorm(1e4), nrow=10)

# Find each column's max value
fun2 <- function(x) {
  apply(x, 2, max)
}

fun2alt <- function(x) {
  max_values <- apply(x, 2, max)
  return(max_values)
}
```

Showing each sets max values:

```{r}


set.seed(1234)
x <- matrix(rnorm(1e4), nrow=10)

result_fun2 <- fun2(x)
result_fun2alt <- fun2alt(x)

all(result_fun2 == result_fun2alt)


```

## Part 3: Parallelization

```{r}
my_boot <- function(dat, stat, R, ncpus = 3L) {
  
  # Getting the random indices
  n <- nrow(dat)
  idx <- matrix(sample.int(n, n*R, TRUE), nrow=n, ncol=R)
  
  # THIS FUNCTION NEEDS TO BE PARALELLIZED
  # EDIT THIS CODE:
  ans <- lapply(seq_len(R), function(i) {
    stat(dat[idx[,i], , drop=FALSE])
  })
  
  # Converting the list into a matrix
  ans <- do.call(rbind, ans)

  return(ans)
}
```

```{r}
# Bootstrap of an OLS
my_stat <- function(d) coef(lm(y ~ x, data=d))

# DATA SIM
set.seed(1)
n <- 500; R <- 1e4

x <- cbind(rnorm(n)); y <- x*5 + rnorm(n)

# Checking if we get something similar as lm
ans0 <- confint(lm(y~x))
ans1 <- my_boot(dat = data.frame(x, y), my_stat, R = R, ncpus = 2L)

# You should get something like this
t(apply(ans1, 2, quantile, c(.025,.975)))
##                   2.5%      97.5%
## (Intercept) -0.1372435 0.05074397
## x            4.8680977 5.04539763
ans0
##                  2.5 %     97.5 %
## (Intercept) -0.1379033 0.04797344
## x            4.8650100 5.04883353
```

```{r}
system.time(my_boot(dat = data.frame(x, y), my_stat, R = 4000, ncpus = 1L))
system.time(my_boot(dat = data.frame(x, y), my_stat, R = 4000, ncpus = 2L))
```
